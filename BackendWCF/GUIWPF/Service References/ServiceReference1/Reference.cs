//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUIWPF.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/BackendWCF")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/BackendWCF")]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Beskrivelsek__BackingFieldField;
        
        private System.DateTime Datok__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private string Navnk__BackingFieldField;
        
        private string Stedk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Beskrivelse>k__BackingField", IsRequired=true)]
        public string Beskrivelsek__BackingField {
            get {
                return this.Beskrivelsek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Beskrivelsek__BackingFieldField, value) != true)) {
                    this.Beskrivelsek__BackingFieldField = value;
                    this.RaisePropertyChanged("Beskrivelsek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Dato>k__BackingField", IsRequired=true)]
        public System.DateTime Datok__BackingField {
            get {
                return this.Datok__BackingFieldField;
            }
            set {
                if ((this.Datok__BackingFieldField.Equals(value) != true)) {
                    this.Datok__BackingFieldField = value;
                    this.RaisePropertyChanged("Datok__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Navn>k__BackingField", IsRequired=true)]
        public string Navnk__BackingField {
            get {
                return this.Navnk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Navnk__BackingFieldField, value) != true)) {
                    this.Navnk__BackingFieldField = value;
                    this.RaisePropertyChanged("Navnk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Sted>k__BackingField", IsRequired=true)]
        public string Stedk__BackingField {
            get {
                return this.Stedk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Stedk__BackingFieldField, value) != true)) {
                    this.Stedk__BackingFieldField = value;
                    this.RaisePropertyChanged("Stedk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        GUIWPF.ServiceReference1.CompositeType GetDataUsingDataContract(GUIWPF.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<GUIWPF.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(GUIWPF.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateEvent", ReplyAction="http://tempuri.org/IService1/CreateEventResponse")]
        void CreateEvent(string navn, string beskrivelse, System.DateTime dato, string sted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateEvent", ReplyAction="http://tempuri.org/IService1/CreateEventResponse")]
        System.Threading.Tasks.Task CreateEventAsync(string navn, string beskrivelse, System.DateTime dato, string sted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEvent", ReplyAction="http://tempuri.org/IService1/UpdateEventResponse")]
        void UpdateEvent(GUIWPF.ServiceReference1.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEvent", ReplyAction="http://tempuri.org/IService1/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(GUIWPF.ServiceReference1.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEvent", ReplyAction="http://tempuri.org/IService1/DeleteEventResponse")]
        void DeleteEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEvent", ReplyAction="http://tempuri.org/IService1/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEvent", ReplyAction="http://tempuri.org/IService1/GetEventResponse")]
        GUIWPF.ServiceReference1.Event GetEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEvent", ReplyAction="http://tempuri.org/IService1/GetEventResponse")]
        System.Threading.Tasks.Task<GUIWPF.ServiceReference1.Event> GetEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvents", ReplyAction="http://tempuri.org/IService1/GetAllEventsResponse")]
        System.Collections.Generic.List<GUIWPF.ServiceReference1.Event> GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvents", ReplyAction="http://tempuri.org/IService1/GetAllEventsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GUIWPF.ServiceReference1.Event>> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEventString", ReplyAction="http://tempuri.org/IService1/GetAllEventStringResponse")]
        string GetAllEventString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEventString", ReplyAction="http://tempuri.org/IService1/GetAllEventStringResponse")]
        System.Threading.Tasks.Task<string> GetAllEventStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignupForEvent", ReplyAction="http://tempuri.org/IService1/SignupForEventResponse")]
        void SignupForEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignupForEvent", ReplyAction="http://tempuri.org/IService1/SignupForEventResponse")]
        System.Threading.Tasks.Task SignupForEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CancelForEvent", ReplyAction="http://tempuri.org/IService1/CancelForEventResponse")]
        void CancelForEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CancelForEvent", ReplyAction="http://tempuri.org/IService1/CancelForEventResponse")]
        System.Threading.Tasks.Task CancelForEventAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : GUIWPF.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<GUIWPF.ServiceReference1.IService1>, GUIWPF.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public GUIWPF.ServiceReference1.CompositeType GetDataUsingDataContract(GUIWPF.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<GUIWPF.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(GUIWPF.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void CreateEvent(string navn, string beskrivelse, System.DateTime dato, string sted) {
            base.Channel.CreateEvent(navn, beskrivelse, dato, sted);
        }
        
        public System.Threading.Tasks.Task CreateEventAsync(string navn, string beskrivelse, System.DateTime dato, string sted) {
            return base.Channel.CreateEventAsync(navn, beskrivelse, dato, sted);
        }
        
        public void UpdateEvent(GUIWPF.ServiceReference1.Event e) {
            base.Channel.UpdateEvent(e);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(GUIWPF.ServiceReference1.Event e) {
            return base.Channel.UpdateEventAsync(e);
        }
        
        public void DeleteEvent(int id) {
            base.Channel.DeleteEvent(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(int id) {
            return base.Channel.DeleteEventAsync(id);
        }
        
        public GUIWPF.ServiceReference1.Event GetEvent(int id) {
            return base.Channel.GetEvent(id);
        }
        
        public System.Threading.Tasks.Task<GUIWPF.ServiceReference1.Event> GetEventAsync(int id) {
            return base.Channel.GetEventAsync(id);
        }
        
        public System.Collections.Generic.List<GUIWPF.ServiceReference1.Event> GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GUIWPF.ServiceReference1.Event>> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public string GetAllEventString() {
            return base.Channel.GetAllEventString();
        }
        
        public System.Threading.Tasks.Task<string> GetAllEventStringAsync() {
            return base.Channel.GetAllEventStringAsync();
        }
        
        public void SignupForEvent() {
            base.Channel.SignupForEvent();
        }
        
        public System.Threading.Tasks.Task SignupForEventAsync() {
            return base.Channel.SignupForEventAsync();
        }
        
        public void CancelForEvent() {
            base.Channel.CancelForEvent();
        }
        
        public System.Threading.Tasks.Task CancelForEventAsync() {
            return base.Channel.CancelForEventAsync();
        }
    }
}
